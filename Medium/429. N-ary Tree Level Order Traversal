/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution 
{
    public List<List<Integer>> levelOrder(Node root)
    {
        List<List<Integer>> ans = new ArrayList<>();
        if(root == null)
        {
            return ans;
        }
        List<Integer> list = new ArrayList<>();
        Queue<Node> q = new LinkedList<>();
        
        q.add(root);
        q.add(null);
        
        while(!q.isEmpty())
        {
            Node curr = q.poll();
            if(curr == null)
            {
                ans.add(list);
                list = new ArrayList<>();
                if(q.isEmpty())
                {
                    break;
                }
                q.add(null);
                continue;
            }
            list.add(curr.val);
            for(Node n : curr.children)
            {
                q.add(n);
            }
        }
        
        return ans;
    }
}
