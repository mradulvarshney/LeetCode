class Solution 
{   
    HashMap<Integer, List<Integer>> map;
    public int[] findOrder(int numCourses, int[][] prerequisites) 
    {
        map = new HashMap<>();

        for (int i=0; i<numCourses; i++)
        {
            map.put(i, new ArrayList<>());
        }

        for(int i=0; i<prerequisites.length; i++)
        {
            map.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }

        return topologicalSort();
    }

    public int[] inDegree()
    {
        int[] in = new int[map.size()];

        for(int key : map.keySet())
        {
            for (int nbrs : map.get(key))
            {
                in[nbrs]++;
            }
        }

        return in;
    }

    public int[] topologicalSort()
    {
        int[] in = inDegree();

        Queue<Integer> q = new LinkedList<>();

        for(int i=0; i<in.length; i++)
        {
            if(in[i] == 0)
            {
                q.add(i);
            }
        }
        int i = 0;
        int[] res = new int[map.size()];
        int count = 0;
        while (!q.isEmpty())
        {
            int rv = q.remove();
            res[i++] = rv;
            count++;
            for(int nbrs : map.get(rv))
            {
                in[nbrs]--;
                if(in[nbrs] == 0)
                {
                    q.add(nbrs);
                }
            }
        }

        return count == map.size() ? res : new int[0];
    }
}
