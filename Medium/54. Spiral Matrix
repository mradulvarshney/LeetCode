class Solution {
    public List<Integer> spiralOrder(int[][] matrix) 
    {
        List<Integer> arr = new ArrayList<>();
        int left = 0;
        int top = 0;
        int right = matrix[top].length-1;
        int bottom = matrix.length-1;
        int dir = 1;
        int count = (right+1)*(bottom+1);
        //System.out.println(right+" "+bottom+" "+count);
        while(left<=right && top<=bottom)
        {
            if(count>0)
            {
                if(dir==1)
                {
                    for(int i=left; i<=right; i++)
                    {
                        arr.add(matrix[top][i]);
                        count--;
                    }
                    top++;
                    dir=2;
                }
            }
            
            if(count>0)
            {
                if(dir==2)
                {
                    for(int i=top; i<=bottom; i++)
                    {
                        arr.add(matrix[i][right]);
                        count--;
                    }
                    dir=3;
                    right--;
                }
            }
            
            if(count>0)
            {
                if(dir==3)
                {
                    for(int i=right; i>=left; i--)
                    {
                        arr.add(matrix[bottom][i]);
                        count--;
                    }
                    bottom--;
                    dir=4;
                }
            }
            
            if(count>0)
            {
                if(dir==4)
                {
                    for(int i=bottom; i>=top; i--)
                    {
                        arr.add(matrix[i][left]);
                        count--;
                    }
                    left++;
                    dir=1;
                }
            }
        }
        return arr;
    }
}
