/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution 
{
    int ans = Integer.MIN_VALUE;
    public int diameterOfBinaryTree(TreeNode root) 
    {
        if(root == null)
        {
            return 0;
        }
        int present = ht(root.left) + ht(root.right) + 2;
        
        if(ans<present)
        {
            ans = present;            
        }
        diameterOfBinaryTree(root.left);
        diameterOfBinaryTree(root.right);
        return ans;
    }
    
    public int ht(TreeNode node)
    {
        if(node == null)
        {
            return -1;
        }
        int lh = ht(node.left);
        int rh = ht(node.right);
        
        return Math.max(lh,rh)+1;
    }
}
