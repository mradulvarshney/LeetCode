class Solution 
{
    public List<Integer> twoOutOfThree(int[] nums1, int[] nums2, int[] nums3) 
    {
        ArrayList<Integer> list = new ArrayList<>();
        
        Map<Integer, Integer> map = new HashMap<>();
        
        for(int i=0; i<nums1.length; i++)
        {
            map.put(nums1[i], 1);
        }
        Map<Integer, Integer> map1 = new HashMap<>();
        
        for(int i=0; i<nums2.length; i++)
        {
            if(map.get(nums2[i]) == null)
            {
                map.put(nums2[i], 1);
                map1.put(nums2[i], 1);
            }
            else if(map.get(nums2[i]) == 2)
            {
                continue;
            }
            else
            {
                if(map1.get(nums2[i]) == null)
                {
                    map1.put(nums2[i], 1);
                }
                else if(map1.get(nums2[i]) == 1)
                {
                    continue;
                }
                map.put(nums2[i], 2);
            }
        }
        Map<Integer, Integer> map2 = new HashMap<>();
        
        for(int i=0; i<nums3.length; i++)
        {
            if(map.get(nums3[i]) == null)
            {
                map.put(nums3[i], 1);
                map2.put(nums3[i], 1);
            }
            else if(map.get(nums3[i]) == 3)
            {
                continue;
            }
            else
            {
                if(map2.get(nums3[i]) == null)
                {
                    map2.put(nums3[i], 1);
                }
                else if(map2.get(nums3[i]) == 1)
                {
                    continue;
                }
                map.put(nums3[i], 3);
            }
        }
        
        for(int i : map.keySet())
        {
            if(map.get(i)>=2)
            {
                list.add(i);
            }
        }
        
        return list;
    }
}
