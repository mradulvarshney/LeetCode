/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution 
{
    int count = 1;
    public int[] findMode(TreeNode root) 
    {
        HashMap<Integer, Integer> map = new HashMap<>();
        findMode(root, map);
        int size = 0;
        for(int i : map.keySet())
        {
            if(map.get(i) == count)
            {
                size++;
            }
        }
        int result[] = new int[size];
        int k = 0;
        for(int i : map.keySet())
        {
            if(map.get(i) == count)
            {
                result[k++] = i;
            }
        }
        
        return result;
        
    }
    
    private void findMode(TreeNode root, Map<Integer, Integer> map)
    {
        if(root == null) 
        {
            return;
        } 
        else if(map.containsKey(root.val)) 
        {
            map.put(root.val, map.get(root.val)+1);
            count = Math.max(count, map.get(root.val));
        } 
        else 
        {
            map.put(root.val, 1);
        }

        findMode(root.left, map);
        findMode(root.right, map);
    }
}
